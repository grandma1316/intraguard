{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getDatabase } from 'firebase/database';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB76rv9x0pi6cf9Ba1fb4Nx5oQ_idb59Es\",\n  authDomain: \"integraguard-525e3.firebaseapp.com\",\n  projectId: \"integraguard-525e3\",\n  storageBucket: \"integraguard-525e3.appspot.com\",\n  messagingSenderId: \"831390005885\",\n  appId: \"1:831390005885:web:a3b080705e85c4a9c68f14\",\n  measurementId: \"G-ZW4J4P3LCC\",\n  databaseURL: \"https://integraguard-525e3-default-rtdb.firebaseio.com/\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const database = getDatabase(app);\nexport const messaging = getMessaging(app);\n\n// Request notification permission and get token\nexport const requestNotificationPermission = async () => {\n  try {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      const token = await getToken(messaging, {\n        vapidKey: 'YOUR_VAPID_KEY' // You'll need to add your VAPID key here\n      });\n      return token;\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting notification permission:', error);\n    return null;\n  }\n};\n\n// Listen for foreground messages\nexport const onMessageListener = () => {\n  return new Promise(resolve => {\n    onMessage(messaging, payload => {\n      resolve(payload);\n    });\n  });\n};\nexport default app;","map":{"version":3,"names":["initializeApp","getAuth","getDatabase","getMessaging","getToken","onMessage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","app","auth","database","messaging","requestNotificationPermission","permission","Notification","requestPermission","token","vapidKey","error","console","onMessageListener","Promise","resolve","payload"],"sources":["C:/Users/hasee/Desktop/integraGuard-FYP-20250530T185208Z-1-001/integraGuard-FYP/src/services/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getDatabase } from 'firebase/database';\r\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB76rv9x0pi6cf9Ba1fb4Nx5oQ_idb59Es\",\r\n  authDomain: \"integraguard-525e3.firebaseapp.com\",\r\n  projectId: \"integraguard-525e3\",\r\n  storageBucket: \"integraguard-525e3.appspot.com\",\r\n  messagingSenderId: \"831390005885\",\r\n  appId: \"1:831390005885:web:a3b080705e85c4a9c68f14\",\r\n  measurementId: \"G-ZW4J4P3LCC\",\r\n  databaseURL: \"https://integraguard-525e3-default-rtdb.firebaseio.com/\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase services\r\nexport const auth = getAuth(app);\r\nexport const database = getDatabase(app);\r\nexport const messaging = getMessaging(app);\r\n\r\n// Request notification permission and get token\r\nexport const requestNotificationPermission = async () => {\r\n  try {\r\n    const permission = await Notification.requestPermission();\r\n    if (permission === 'granted') {\r\n      const token = await getToken(messaging, {\r\n        vapidKey: 'YOUR_VAPID_KEY' // You'll need to add your VAPID key here\r\n      });\r\n      return token;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error getting notification permission:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Listen for foreground messages\r\nexport const onMessageListener = () => {\r\n  return new Promise((resolve) => {\r\n    onMessage(messaging, (payload) => {\r\n      resolve(payload);\r\n    });\r\n  });\r\n};\r\n\r\nexport default app; "],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,YAAY,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,oCAAoC;EAChDC,SAAS,EAAE,oBAAoB;EAC/BC,aAAa,EAAE,gCAAgC;EAC/CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE,cAAc;EAC7BC,WAAW,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGf,aAAa,CAACM,cAAc,CAAC;;AAEzC;AACA,OAAO,MAAMU,IAAI,GAAGf,OAAO,CAACc,GAAG,CAAC;AAChC,OAAO,MAAME,QAAQ,GAAGf,WAAW,CAACa,GAAG,CAAC;AACxC,OAAO,MAAMG,SAAS,GAAGf,YAAY,CAACY,GAAG,CAAC;;AAE1C;AACA,OAAO,MAAMI,6BAA6B,GAAG,MAAAA,CAAA,KAAY;EACvD,IAAI;IACF,MAAMC,UAAU,GAAG,MAAMC,YAAY,CAACC,iBAAiB,CAAC,CAAC;IACzD,IAAIF,UAAU,KAAK,SAAS,EAAE;MAC5B,MAAMG,KAAK,GAAG,MAAMnB,QAAQ,CAACc,SAAS,EAAE;QACtCM,QAAQ,EAAE,gBAAgB,CAAC;MAC7B,CAAC,CAAC;MACF,OAAOD,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BxB,SAAS,CAACa,SAAS,EAAGY,OAAO,IAAK;MAChCD,OAAO,CAACC,OAAO,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}