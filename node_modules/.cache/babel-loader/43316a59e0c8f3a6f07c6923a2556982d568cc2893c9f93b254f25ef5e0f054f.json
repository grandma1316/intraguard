{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hasee\\\\Desktop\\\\integraGuard-FYP-20250530T185208Z-1-001\\\\integraGuard-FYP\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from 'firebase/auth';\nimport { ref, set, get } from 'firebase/database';\nimport { auth, database } from '../services/firebase';\nimport { authAPI, notificationAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      if (firebaseUser) {\n        try {\n          // Get additional user data from database\n          const userRef = ref(database, `Users/${firebaseUser.uid}`);\n          const snapshot = await get(userRef);\n          const userData = snapshot.val() || {};\n          setUser({\n            uid: firebaseUser.uid,\n            email: firebaseUser.email,\n            ...userData\n          });\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n          setUser({\n            uid: firebaseUser.uid,\n            email: firebaseUser.email\n          });\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n\n      // Request notification permission and store token\n      const token = await requestNotificationPermission();\n      if (token) {\n        await notificationAPI.storeFCMToken({\n          email: userCredential.user.email,\n          fcm_token: token\n        });\n      }\n      return userCredential.user;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, password, name, city) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update profile with display name\n      await updateProfile(userCredential.user, {\n        displayName: name\n      });\n\n      // Store additional user data in database\n      const userRef = ref(database, `Users/${userCredential.user.uid}`);\n      await set(userRef, {\n        email,\n        name,\n        city,\n        createdAt: new Date().toISOString(),\n        fcmTokens: {}\n      });\n\n      // Request notification permission and store token\n      const token = await requestNotificationPermission();\n      if (token) {\n        await notificationAPI.storeFCMToken({\n          email,\n          fcm_token: token\n        });\n      }\n      return userCredential.user;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut(auth);\n      setUser(null);\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    }\n  };\n  const requestNotificationPermission = async () => {\n    try {\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        // You'll need to implement getToken from firebase/messaging\n        // const token = await getToken(messaging, { vapidKey: 'YOUR_VAPID_KEY' });\n        // return token;\n        return null;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting notification permission:', error);\n      return null;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    clearError: () => setError(null)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","ref","set","get","auth","database","authAPI","notificationAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","unsubscribe","firebaseUser","userRef","uid","snapshot","userData","val","email","console","login","password","userCredential","token","requestNotificationPermission","storeFCMToken","fcm_token","message","register","name","city","displayName","createdAt","Date","toISOString","fcmTokens","logout","permission","Notification","requestPermission","value","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hasee/Desktop/integraGuard-FYP-20250530T185208Z-1-001/integraGuard-FYP/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n  updateProfile\r\n} from 'firebase/auth';\r\nimport { ref, set, get } from 'firebase/database';\r\nimport { auth, database } from '../services/firebase';\r\nimport { authAPI, notificationAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n      if (firebaseUser) {\r\n        try {\r\n          // Get additional user data from database\r\n          const userRef = ref(database, `Users/${firebaseUser.uid}`);\r\n          const snapshot = await get(userRef);\r\n          const userData = snapshot.val() || {};\r\n          \r\n          setUser({\r\n            uid: firebaseUser.uid,\r\n            email: firebaseUser.email,\r\n            ...userData\r\n          });\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n          setUser({\r\n            uid: firebaseUser.uid,\r\n            email: firebaseUser.email\r\n          });\r\n        }\r\n      } else {\r\n        setUser(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      \r\n      // Request notification permission and store token\r\n      const token = await requestNotificationPermission();\r\n      if (token) {\r\n        await notificationAPI.storeFCMToken({\r\n          email: userCredential.user.email,\r\n          fcm_token: token\r\n        });\r\n      }\r\n      \r\n      return userCredential.user;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, name, city) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      \r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      \r\n      // Update profile with display name\r\n      await updateProfile(userCredential.user, { displayName: name });\r\n      \r\n      // Store additional user data in database\r\n      const userRef = ref(database, `Users/${userCredential.user.uid}`);\r\n      await set(userRef, {\r\n        email,\r\n        name,\r\n        city,\r\n        createdAt: new Date().toISOString(),\r\n        fcmTokens: {}\r\n      });\r\n      \r\n      // Request notification permission and store token\r\n      const token = await requestNotificationPermission();\r\n      if (token) {\r\n        await notificationAPI.storeFCMToken({\r\n          email,\r\n          fcm_token: token\r\n        });\r\n      }\r\n      \r\n      return userCredential.user;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      setUser(null);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const requestNotificationPermission = async () => {\r\n    try {\r\n      const permission = await Notification.requestPermission();\r\n      if (permission === 'granted') {\r\n        // You'll need to implement getToken from firebase/messaging\r\n        // const token = await getToken(messaging, { vapidKey: 'YOUR_VAPID_KEY' });\r\n        // return token;\r\n        return null;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error getting notification permission:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError: () => setError(null)\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}